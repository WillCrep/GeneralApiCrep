name: SonarCloud Analysis (Develop)

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest

    steps:
      # 📦 Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para que SonarCloud analice bien el historial

      # 🧰 Instalar .NET 8
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 🧪 Restaurar dependencias
      - name: Restore dependencies
        run: dotnet restore ./GeneralApiCrep.sln

      # 🧱 Compilar solución
      - name: Build solution
        run: dotnet build ./GeneralApiCrep.sln --no-restore --configuration Release

      # 🧪 Ejecutar tests con cobertura
      - name: Run tests with coverage
        run: dotnet test ./tests/GeneralCrep.Tests/GeneralCrep.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults

      # 📊 Convertir reporte de cobertura a formato SonarCloud (opcional)
      - name: Report coverage
        run: |
          mkdir -p coverage
          find ./TestResults -type f -name "coverage.cobertura.xml" -exec cp {} ./coverage/coverage.xml \; || echo "No coverage file found"

      # ☁️ Análisis SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Necesario para PR decoration
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Token generado en SonarCloud

      # 🧹 Publicar resultados opcional (ayuda a depurar)
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/coverage.xml
          if-no-files-found: ignore
