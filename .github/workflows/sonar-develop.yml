name: SonarCloud Analysis (Develop)

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest

    steps:
      # 📦 1️⃣ Checkout del código fuente
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para un análisis correcto de SonarCloud

      # 🧰 2️⃣ Instalar .NET 8 SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 🔧 3️⃣ Agregar herramientas globales al PATH (dotnet tool install lo requiere)
      - name: Add .NET tools to PATH
        run: echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      # 🧩 4️⃣ Instalar SonarScanner para .NET
      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      # 🧪 5️⃣ Restaurar dependencias
      - name: Restore dependencies
        run: dotnet restore ./GeneralApiCrep.sln

      # 📦 6️⃣ Instalar coverlet collector (para cobertura)
      - name: Install coverlet collector
        run: dotnet add ./tests/GeneralCrep.Tests/GeneralCrep.Tests.csproj package coverlet.collector

      # 🚀 7️⃣ Iniciar análisis SonarCloud
      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"WillCrep_GeneralApiCrep" \
            /o:"willcrep-github" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/*Tests.cs" \
            /d:sonar.verbose=true

      # 🧱 8️⃣ Compilar solución
      - name: Build solution
        run: dotnet build ./GeneralApiCrep.sln --no-restore --configuration Release

      # 🧪 9️⃣ Ejecutar tests con cobertura de código
      - name: Run tests with coverage
        run: |
          dotnet test ./tests/GeneralCrep.Tests/GeneralCrep.Tests.csproj \
            --no-build --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutput=./TestResults/coverage.opencover.xml \
            /p:CoverletOutputFormat=opencover

      # 🧾 🔍 (opcional) listar los archivos de cobertura
      - name: List coverage files (debug)
        run: find . -type f -name "coverage*.xml"

      # ☁️ 🔟 Finalizar análisis SonarCloud
      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # 📊 1️⃣1️⃣ Publicar reportes de cobertura como artefacto opcional
      - name: Upload coverage report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./TestResults
          if-no-files-found: ignore
